// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ALU(x=aluain, 
        y=alubin,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
         f=instruction[7],
        no=instruction[6],
        out=aluout,
        out=outM,
        zr=eq,
        ng=lt);

    // Memory Load
    And(a=instruction[15], b=instruction[3], out=writeM);

    // A Instruction Flag
    Not(in=instruction[15], out=ainstr);

    // A/M Selector
    Mux16(a=regaout,
          b=inM,
          sel=instruction[12],
          out=alubin);

    // D Register
    And(a=instruction[15], b=instruction[4], out=dregload);
    Register(in=aluout,
             out=aluain,
             load=dregload);

    // A Register
    And(a=instruction[15], b=instruction[5], out=cinstraregload);
    Or(a=cinstraregload, b=ainstr, out=aregload);
    Register(in=regain,
             out=regaout,
             out[0..14]=addressM,
             load=aregload);

    // I/C Instruction Selector
    Mux16(a=aluout,
          b=instruction,
          sel=ainstr,
          out=regain);
    
    // Jump Handling
    Not(in=eq, out=ne);
    Not(in=lt, out=nlt);
    And(a=ne, b=nlt, out=gt);
    Or(a=eq, b=gt, out=ge);
    Or(a=eq, b=lt, out=le);
    // 3-way and for jmp condition
    And(a=instruction[0], b=instruction[1], out=jmp1);
    And(a=jmp1, b=instruction[2], out=jmp);
    // Mux8 implementation
    // Low bit
    Mux(b=gt, sel=instruction[0], out=jmux1);
    Mux(a=eq, b=ge, sel=instruction[0], out=jmux2);
    Mux(a=lt, b=ne, sel=instruction[0], out=jmux3);
    Mux(a=le, b=jmp, sel=instruction[0], out=jmux4);
    // Middle bit
    Mux(a=jmux1, b=jmux2, sel=instruction[1], out=jmux5);
    Mux(a=jmux3, b=jmux4, sel=instruction[1], out=jmux6);
    // High bit
    Mux(a=jmux5, b=jmux6, sel=instruction[2], out=jump);

    // PC Load Logic
    And(a=instruction[15], b=jump, out=pcload);
    Not(in=pcload, out=pcinc);

    // Instruction Fetching
    PC(in=regaout,
       load=pcload,
       inc=pcinc,
       reset=reset,
       out[0..14]=pc);

       
}
